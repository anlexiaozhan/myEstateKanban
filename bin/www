#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('myEstateKanban:server');
var http = require('http');

/**
 * 连接数据库，开启定时任务
 */
var mongoose = require('mongoose');
var mongodb_url = 'mongodb://localhost:27017/myEstateKanban';
mongoose.connect(mongodb_url);
/**
 * 开启定时任务
 * 定时任务 子进程中如有mongodb数据库连接，需要重新connect一次
 * 见../task/runTask.js
 */
var spawn = require('child_process').spawn;
var cronJob = require('cron').CronJob;
//每天12-23点 33分开始跑数据
var job = new cronJob('0 33 12-23 * * *',function(){
  console.log(new Date());
  //创建一个子进程
  var child = spawn(process.execPath,['task/runTask.js']);
  //子进程的标准输出传递到主进程 的标准输出
  child.stdout.pipe(process.stdout);
  child.stderr.pipe(process.stderr);
});
job.start();

/*手动执行 
var task=require('../task/mainTask')
task.runTask();
*/

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '2048');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
